1. Structs
2. Interfaces
3. Enums

Como as classes, as struts são estruturas de dados que podem conter membros de dados e membros de ação, mas diferentemente das classes, as structs são tipos de valor e não requerem alocação de heap.

Uma variável de um tipo de struct armazena diretamente os dados da estrutura, enquanto uma var de um tipo de classe armazena uma ref a um obj alocado na memoria.

Structs não aceitam herança determinada pelo desenvolvedor.

São uteis para pequenas estruturas de dados que possuem semântica de valor: números complexos, pontos em um sistema de coordenadas ou pares de chave-valor em um dicionário são bons exemplos de utilização.

O uso de structs em vez de classes para pequenas estruturas de dados pode fazer uma grande diferença no número de alocações de memória.


//heap
public class Ponto{
	Ponto[] pontos = new Ponto [100];
	for (int i = 0; i < 100; i++)
		pontos[i] = new Ponto(i, i);
	
}


//struct

public struct Ponto{
	public int x, y;
	public Ponto (int x, int y){
	
	this.x = x;
	this.y = y;
	}

}


Construtores de structs são chamados com o operador new, semelhante a um construtor de classe, mas em vez de alocar dinamicamente um objeto no heap gerenciado e retornar uma referência a ele, um construtor struct simplesmente retorna o próprio valor struct (normalmente em um local temporário na stack), e esse valor é copiado conforme necessário.

https://www.rximiaco.tech/pt/category/fundamentos


